{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["/*Imports*/\nimport yaml from 'js-yaml';\nimport path from 'path';\nimport glob from 'glob';\nimport globwatch from 'globwatcher';\nimport json from 'read-json';\nimport fs from 'fs';\nimport _ from 'lodash';\nimport debug from 'gengojs-debug';\nimport toml from 'toml';\nconst log = debug('backend');\n/**\n * This class manages the backend for gengojs.\n * @class Memory\n */\nclass Memory {\n  constructor(options) {\n      // Set directory\n      this.directory = (() => {\n        var directory = path.normalize(options.directory);\n        if (directory[directory.length - 1] !== path.sep)\n          return directory + path.sep;\n        else return directory;\n      })();\n      // Set extension\n      this.extension = options.extension;\n      // Set prefix\n      this.prefix = options.prefix;\n      // Set cache\n      this.cache = options.cache;\n      // Check that the extension has a '.'\n      if (!/\\./.test(this.extension))\n        this.extension = '.' + this.extension.replace('.yml', '.yaml');\n      // Set path\n      this.path = this.directory + '*' + this.extension;\n      log.debug('directory:', this.directory);\n      this.data = {};\n      // Check cache and read all files\n      if (this.cache) this.read();\n      else {\n        var watcher = globwatch.globwatcher(this.path);\n        watcher.on('changed', () => this.read());\n        watcher.on('added', () => this.read());\n        watcher.on('deleted', () => this.read());\n        watcher.ready.then(() => {\n          this.read();\n          log.info('Memory is actively watching ' + this.directory);\n        });\n      }\n    }\n    /**\n     * Loads the dictionary asyncronously \n     * and calls the callback when all is done.\n     * @param  {Function} callback The callback function\n     * @return {Object}            The dictionary\n     */\n  read(callback) {\n      var dictionary = {};\n      // Pass the context as 'this' and \n      //read all the files with respect to its extension.\n      glob(this.path, (() => {\n        return (error, files) => {\n          log.debug('files:', files, 'errors:', error);\n          // Read if this is a JSON file.\n          if (/.json/.test(this.extension))\n            files.forEach(file => json(file, (error, data) => {\n              try {\n                if (error || !data)\n                  throw new Error('Whoops! Is your JSON file in proper format?');\n                else {\n                  dictionary[this.normalize(file.split('/').pop())] = data;\n                  this.data = dictionary;\n                  if (_.isFunction(callback)) callback(dictionary);\n                }\n              } catch (error) {\n                log.error(error.stack || String(error));\n              }\n            }));\n          // Read if this is a TOML file.\n          if (/.toml/.test(this.extension))\n            files.forEach(file => fs.readFile(file, (error, data) => {\n              try {\n                if (error || !data)\n                  throw new Error('Whoops! Is your YAML file in proper format?');\n                else {\n                  dictionary[\n                    this.normalize(file.split('/').pop())\n                  ] = toml.parse(data);\n                  this.data = dictionary;\n                  if (_.isFunction(callback)) callback(dictionary);\n                }\n              } catch (error) {\n                log.error(error.stack || String(error));\n              }\n            }));\n          // Read if this is a YAML file.\n          if (/.yaml/.test(this.extension))\n            files.forEach(file => fs.readFile(file, (error, data) => {\n              try {\n                if (error || !data)\n                  throw new Error('Whoops! Is your YAML file in proper format?');\n                else {\n                  dictionary[\n                    this.normalize(file.split('/').pop())\n                  ] = yaml.safeLoad(data);\n                  this.data = dictionary;\n                  if (_.isFunction(callback)) callback(dictionary);\n                }\n              } catch (error) {\n                log.error(error.stack || String(error));\n              }\n            }));\n          // Read if this is a Javascript file.\n          if (!/.json/.test(this.extension) && /.js/.test(this.extension))\n            files.forEach(file => {\n              dictionary[this.normalize(file.split('/').pop())] = require(file);\n              if (_.isFunction(callback)) callback(dictionary);\n            });\n        };\n      })());\n    }\n    /**\n     * Returns the entire dictionary\n     * @param  {String} locale The key to the dictionary.\n     * @return {Object}        The dictionary\n     */\n  catalog(locale) {\n      return locale ? this.find(locale) : this.data;\n    }\n    /**\n     * Searches for the dictionary\n     * @param  {String} locale The key to the dictionary.\n     * @return {Object}        The dictionary for the specified locale.\n     */\n  find(locale) {\n      return this.data[locale] || this.data[locale.toLowerCase()];\n    }\n    /** \n     * Determines whether the dictionary exists\n     * @param  {String}  locale The key to the dictionary.\n     * @return {Boolean}        True if the locale exists.\n     */\n  has(locale) {\n      return (this.data[locale] || this.data[locale.toLowerCase()]) ? true : false;\n    }\n    /**\n     * Normalizes the files\n     * @param  {String} file The file path.\n     * @return {String}      The normalized file path.\n     * @private\n     */\n  normalize(file) {\n    file = file.toLowerCase().replace(this.extension, '').replace('_', '-');\n    if (file.indexOf(this.prefix) > -1) file = file.replace(this.prefix, '');\n    return file;\n  }\n}\n\n// Export\nexport default () => {\n  'use strict';\n  return {\n    main: function() {\n      this.backend = new Memory(this.options.backend);\n    },\n    package: _.merge({\n      type: 'backend'\n    }, require('../package')),\n    defaults: require('../defaults')\n  };\n};"],"sourceRoot":"/source/"}